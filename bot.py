import os
import logging
from pprint import pprint

from dotenv import load_dotenv
from aiogram import executor, Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup
import requests
from aiogram.dispatcher import FSMContext
import asyncio

logging.basicConfig(level=logging.INFO)
load_dotenv()
bot = Bot(token=os.getenv("TOKEN"))
wea = os.getenv("weather_token")
dp = Dispatcher(bot, storage=MemoryStorage())

ADMINS =[1011382984]
inline_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)

async def set_default_commands(dp):
    await bot.set_my_commands(
        [
            types.BotCommand('start', '–ó–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç–∞'),
            types.BotCommand('author', '—ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∞–≤—Ç–æ—Ä–∞ –±–æ—Ç–∞'),
        ]
    )

async def on_startup(dp):
    await set_default_commands(dp)

@dp.message_handler(commands='start')
async def cmd_start(message: types.Message):
    await message.reply("–ü—Ä–∏–≤—ñ—Ç! –í—ñ—Ç–∞—é, –≤–∏ –∑–∞–ø—É—Å—Ç–∏–ª–∏ –±–æ—Ç–∞, –í–≤–µ–¥—ñ—Ç—å –º—ñ—Å—Ç–æ(–∫—Ä–∞—â–µ –∑ –¥–æ—Ç–∞–∫–æ–º —Å–≤–æ—î—ó –∫—Ä–∞—ó–Ω–∏ —Ç–∞–º Ua, UK, US)")

@dp.message_handler(commands='author')
async def cmd_author(message: types.Message):
    await message.answer("—ñ–º'—è: –ù–∞–∑–∞—Ä\n"
                         "–ø—Ä—ñ–∑–≤–∏—â–µ: –ì–∞–≤—Ä–∏—à\n"
                         "—Ö–æ–±–±—ñ: –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è\n")

yes = types.InlineKeyboardButton(text='—Ç–∞–∫', callback_data='yes')
no = types.InlineKeyboardButton(text='–Ω—ñ', callback_data = 'no')
inline_keyboard.add(yes, no)

chat_id = None

@dp.message_handler()
async def weather_at_the_moment(message: types.Message, state:FSMContext):
    code_to_smile = {
        "Clear": "–Ø—Å–Ω–æ \U00002600",
        "Clouds": "–•–º–∞—Ä–Ω–æ \U00002601",
        "Rain": "–î–æ—â \U00002614",
        "Drizzle": "–î–æ—â \U00002614",
        "Thunderstorm": "–ì—Ä–æ–∑–∞ \U000026A1",
        "Snow": "–°–Ω—ñ–≥ \U0001F328",
        "Mist": "–¢—É–º–∞–Ω \U0001F32B"
    }
    if message.text == '—Ç–∞–∫':
        await message.answer("–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞")
    else:
        try:
            global city 
            
            city = message.text
            weather = requests.get( 
                f"http://api.openweathermap.org/data/2.5/weather?q={message.text}&appid={wea}&units=metric"
                    )
            data = weather.json()
            

            weather = data["weather"][0]["main"]
            if weather in code_to_smile:
                wd = code_to_smile[weather]
            else:
                wd = '—â–æ –≤ —Ç–µ–±–µ –∑ –ø–æ–≥–æ–¥–æ—é'

            global temp, chat_id, wind

            humidity = data["main"]["humidity"]
            pressure = data["main"]["pressure"]
            wind = data["wind"]["speed"]
            clouds = data["clouds"]["all"]
            temp = data["main"]["temp"]

            await message.reply(f"<b>–í–æ–ª–æ–≥—ñ—Å—Ç—å</b> -- {humidity}&#128166\n<b>–¢–∏—Å–∫</b> --{pressure} –º–º —Ä—Ç.—Å—Ç.\n"
                    f"<b>–®–≤–∏–¥–∫—ñ—Å—Ç—å –≤—ñ—Ç—Ä—É</b> -- {wind} –º/—Å\n<b>—Ö–º–∞—Ä–Ω—ñ—Å—Ç—å</b> -- {clouds}&#x2601\n"
                    f"<b>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞</b> -- {temp} ‚ÑÉ&#x1F321;\n<b>–ü–æ–≥–æ–¥–∞ –ó–∞–≥–∞–ª–æ–º</b> -- {wd}", parse_mode='html')
            
            chat_id = message.chat.id
            await bot.send_message(chat_id=message.chat.id, text='–Ø–∫ —â–æ–¥–æ –ø–æ—Ä–∞–¥–∏ —è–∫ –≤–¥—è–≥–Ω—É—Ç–∏—Å—å??', reply_markup=inline_keyboard)
            await state.set_state('temp')
        except:
            await message.reply('–ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞')

@dp.message_handler(state='temp')
async def temp(message: types.Message, state:FSMContext):
    global temp
    clothing_recomendation ={
        "freeze": "–¢–µ–ø–ª—É –∫—É—Ä—Ç–∫—É, —à—Ç–∞–Ω–∏ –∑ –Ω–∞—á–æ—Å–æ–º, —à–∞—Ä—Ñ, —à–∞–ø–∫—É —Ç–∞ —Ä—É–∫–∞–≤–∏—á–∫–∏",
        "cold": "–•—É–¥—ñ —Ç–∞ –±—ñ–Ω—ñ —à–∞–ø–∫–∞",
        "warm": "–°–æ—Ä–æ—á–∫–∞ –∑ –¥–æ–≤–≥–∏–º —Ä—É–∫–∞–≤–æ–º",
        "hot": "–®–æ—Ä—Ç–∏ —Ç–∞ —Ñ—É—Ç–±–æ–ª–∫–∞ —ñ –Ω–µ –∑–∞–±—É—Ç—å –ø—Ä–æ –≤–æ–¥—É;)",
        # –î–æ–¥–∞–π—Ç–µ —â–µ —è–∫—ñ—Å—å —Ç–µ–º–ø–µ—Ä–∞—Ç—Ä–Ω—ñ –ø–æ–∑–Ω–∞—á–∫–∏, —Ç–∞ –∑–º—ñ–Ω—ñ—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ —Ç–æ–≥–æ —è–∫–∏–π –æ–¥—è–≥ –≤–∏ –æ–¥—è–≥–∞—î—Ç–µ
    }
    if message.text == '—Ç–∞–∫':
        if float(temp) >= 25:
            await message.answer(f"–ù–∞ –≤—É–ª–∏—Ü—ñ –¥–æ—Å–∏—Ç—å —Å–ø–µ–∫—Ç–æ–Ω–æ, –æ—Å—å –º–æ—è –ø–æ—Ä–∞–¥–∞: {clothing_recomendation['hot']}")
        elif float(temp) >= 15:
            await message.answer(f"–ù–∞ –≤—É–ª–∏—Ü—ñ –Ω–µ –¥—É–∂–µ —Ç–µ–ø–ª–æ –∞–ª–µ {clothing_recomendation['warm']} –±—É–¥–µ –¥–æ—Å—Ç–∞—Ç–Ω—å–æ")
        elif float(temp) >= 5:
            await message.answer(f"–î–æ–≤–æ–ª—ñ —Ö–æ–ª–æ–¥–Ω–æ —Ç–æ–º—É –æ–¥—è–≥–Ω–∏—Å—å —Ç–µ–ø–ª—ñ—à–µ: {clothing_recomendation['cold']}")
        else:
            await message.answer(f"–ù–∞ –¥–≤–æ—Ä—ñ –º–æ—Ä–æ–∑–Ω–æ –æ–¥—è–≥–Ω–∏: {clothing_recomendation['freeze']}")
        
        if wind > 15:
            print("–ó–≤–µ—Ä–Ω–∏ —É–≤–∞–≥—É –Ω–∞ —à–≤–∏–¥–∫—ñ—Å—Ç—å –≤—ñ—Ç—Ä—É: –º–æ–∂–ª–∏–≤–æ, –∑–Ω–∞–¥–æ–±–∏—Ç—å—Å—è –¥–æ–¥–∞—Ç–∫–æ–≤–æ –∑–∞—Ö–∏—Å—Ç–∏—Ç–∏ –≥–æ–ª–æ–≤—É —Ç–∞ –æ–±–ª–∏—á—á—è.")
    
    else:
        await message.answer('—Å—É–º–Ω–æ:_(')
    
    await bot.send_message(chat_id=message.chat.id, text='–ü–æ–≥–æ–¥–∞ –Ω–∞ –¥–µ–Ω—å –≤–ø–µ—Ä–µ–¥???', reply_markup=inline_keyboard)
    await state.set_state('forecast')

@dp.message_handler(state='forecast')
async def forecast(message: types.Message, state:FSMContext):
    global city, wea
    days = 8
    if message.text == '—Ç–∞–∫':
        url = f'http://api.openweathermap.org/data/2.5/forecast?q={city}&cnt=8&appid={wea}&units=metric'

    # –í–∏–∫–æ–Ω–∞–Ω–Ω—è HTTP-–∑–∞–ø–∏—Ç—É —ñ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
        response = requests.get(url)
        data = response.json()
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –¥–∞–Ω–∏—Ö —Ç–∞ –≤–∏–≤–µ–¥–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
        code_to_smile = {
        "Clear": "\U00002600",
        "Clouds": "\U00002601",
        "Rain": "\U00002614",
        "Drizzle": "\U00002614",
        "Thunderstorm": "\U000026A1",
        "Snow": "\U0001F328",
        "Mist": "\U0001F32B"
    }
        if response.status_code == 200:
            forecasts = data['list']
            
            table_data = []
            headers = ["–î–∞—Ç–∞/—á–∞—Å", "–û–ø–∏—Å", "–¢–µ–º–ø", "–í–æ–ª–æ–≥—ñ—Å—Ç—å"]
            for forecast in forecasts:
                weather = forecast['weather'][0]["main"]
                if weather in code_to_smile:
                    wd = code_to_smile[weather]
                else:
                    wd = ''
                
                date_time = forecast['dt_txt']
                temperature = float(forecast['main']['temp'])
                humidity = forecast['main']['humidity']
                table_data.append([date_time, wd, round(temperature, 1), humidity])
                
                message_text = "*–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥–∏*\n\n"
                message_text += "|–î–∞—Ç–∞/—á–∞—Å  \u00A0 \u00A0  |–û–ø–∏—Å| üå°  | üíß |\n"
                for row in table_data:
                    message_text += "| {:<12} | {:<3} | {:<4} | {:<4} |\n".format(row[0][5:16], row[1], row[2], row[3])

   
            await message.answer(message_text, parse_mode='Markdown')
            await message.answer("–î—è–∫—É—é –∑–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –±–æ—Ç—É!")
        else:
        
            await message.answer('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –ø—Ä–æ–≥–Ω–æ–∑—É –ø–æ–≥–æ–¥–∏')
        
        await state.finish()
    else:
        await message.answer("–î—è–∫—É—é –∑–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –±–æ—Ç—É!")
    
        await state.finish()

if __name__ == "__main__":
    executor.start_polling(dp, on_startup=on_startup)
    loop = asyncio.get_event_loop()
    